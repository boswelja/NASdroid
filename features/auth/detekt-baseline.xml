<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>LongMethod:AuthComponents.kt$@OptIn(ExperimentalAnimationApi::class) @Composable fun AuthComponents( onLoginSuccess: () -&gt; Unit, modifier: Modifier = Modifier, contentPadding: PaddingValues = PaddingValues(), viewModel: AuthViewModel = koinViewModel() )</ID>
    <ID>MagicNumber:AuthScreen.kt$16</ID>
    <ID>MagicNumber:AuthScreen.kt$9f</ID>
    <ID>MagicNumber:AuthViewModel.kt$AuthViewModel$500</ID>
    <ID>MatchingDeclarationName:AuthTypes.kt$AuthType</ID>
    <ID>NewLineAtEndOfFile:AuthScreen.kt$com.boswelja.truemanager.auth.ui.AuthScreen.kt</ID>
    <ID>TopLevelPropertyNaming:DI.kt$val authModule = module { singleOf(::AuthenticatedServersStoreImpl) bind AuthenticatedServersStore::class viewModelOf(::AuthViewModel) }</ID>
    <ID>UndocumentedPublicClass:AuthTypes.kt$AuthType</ID>
    <ID>UndocumentedPublicClass:AuthTypes.kt$AuthType$ApiKeyAuth : AuthType</ID>
    <ID>UndocumentedPublicClass:AuthTypes.kt$AuthType$BasicAuth : AuthType</ID>
    <ID>UndocumentedPublicClass:AuthViewModel.kt$AuthViewModel : ViewModel</ID>
    <ID>UndocumentedPublicClass:AuthenticatedServersStore.kt$AuthenticatedServer</ID>
    <ID>UndocumentedPublicClass:AuthenticatedServersStore.kt$AuthenticatedServersStore</ID>
    <ID>UndocumentedPublicClass:AuthenticatedServersStoreImpl.kt$AuthenticatedServerDao</ID>
    <ID>UndocumentedPublicClass:AuthenticatedServersStoreImpl.kt$AuthenticatedServerDatabase : RoomDatabase</ID>
    <ID>UndocumentedPublicClass:AuthenticatedServersStoreImpl.kt$AuthenticatedServerDto</ID>
    <ID>UndocumentedPublicClass:AuthenticatedServersStoreImpl.kt$AuthenticatedServersStoreImpl : AuthenticatedServersStore</ID>
    <ID>UndocumentedPublicFunction:AuthComponents.kt$@Composable fun AuthTypeSelector( currentType: AuthType, onAuthTypeChange: (AuthType) -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, )</ID>
    <ID>UndocumentedPublicFunction:AuthComponents.kt$@Composable fun LoginButton( onClick: () -&gt; Unit, modifier: Modifier = Modifier, loading: Boolean = false, enabled: Boolean = true, )</ID>
    <ID>UndocumentedPublicFunction:AuthComponents.kt$@OptIn(ExperimentalAnimationApi::class) @Composable fun AuthComponents( onLoginSuccess: () -&gt; Unit, modifier: Modifier = Modifier, contentPadding: PaddingValues = PaddingValues(), viewModel: AuthViewModel = koinViewModel() )</ID>
    <ID>UndocumentedPublicFunction:AuthComponents.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ApiKeyFields( apiKey: String, onApiKeyChange: (String) -&gt; Unit, onDone: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, )</ID>
    <ID>UndocumentedPublicFunction:AuthComponents.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun BasicAuthFields( username: String, onUsernameChange: (String) -&gt; Unit, password: String, onPasswordChange: (String) -&gt; Unit, onDone: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true )</ID>
    <ID>UndocumentedPublicFunction:AuthComponents.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun ServerAddressField( serverAddress: String, onServerAddressChange: (String) -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, )</ID>
    <ID>UndocumentedPublicFunction:AuthScreen.kt$@Composable fun AuthHeader( modifier: Modifier = Modifier )</ID>
    <ID>UndocumentedPublicFunction:AuthScreen.kt$@Composable fun AuthScreen( onLoginSuccess: () -&gt; Unit, modifier: Modifier = Modifier, contentPadding: PaddingValues = PaddingValues() )</ID>
    <ID>UndocumentedPublicFunction:AuthViewModel.kt$AuthViewModel$fun tryLogIn(serverAddress: String, apiKey: String)</ID>
    <ID>UndocumentedPublicFunction:AuthViewModel.kt$AuthViewModel$fun tryLogIn(serverAddress: String, username: String, password: String)</ID>
    <ID>UndocumentedPublicFunction:AuthenticatedServersStore.kt$AuthenticatedServersStore$fun getAll(): Flow&lt;List&lt;AuthenticatedServer&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:AuthenticatedServersStore.kt$AuthenticatedServersStore$suspend fun add(serverAddress: String, token: String)</ID>
    <ID>UndocumentedPublicFunction:AuthenticatedServersStore.kt$AuthenticatedServersStore$suspend fun delete(server: AuthenticatedServer)</ID>
    <ID>UndocumentedPublicFunction:AuthenticatedServersStoreImpl.kt$AuthenticatedServerDao$@Delete suspend fun delete(server: AuthenticatedServerDto)</ID>
    <ID>UndocumentedPublicFunction:AuthenticatedServersStoreImpl.kt$AuthenticatedServerDao$@Insert suspend fun insertAll(vararg servers: AuthenticatedServerDto)</ID>
    <ID>UndocumentedPublicFunction:AuthenticatedServersStoreImpl.kt$AuthenticatedServerDao$@Query("SELECT * FROM authenticated_servers") fun getAll(): Flow&lt;List&lt;AuthenticatedServerDto&gt;&gt;</ID>
    <ID>UndocumentedPublicFunction:AuthenticatedServersStoreImpl.kt$AuthenticatedServerDatabase$abstract fun authenticatedServerDao(): AuthenticatedServerDao</ID>
    <ID>UndocumentedPublicFunction:Navigation.kt$@OptIn(ExperimentalAnimationApi::class) fun NavGraphBuilder.authNavigation( route: String, onLoginSuccess: () -&gt; Unit )</ID>
    <ID>UndocumentedPublicProperty:AuthTypes.kt$AuthType$@StringRes val labelRes: Int</ID>
    <ID>UndocumentedPublicProperty:AuthTypes.kt$AuthType$val icon: ImageVector</ID>
    <ID>UndocumentedPublicProperty:AuthViewModel.kt$AuthViewModel$val isLoading: StateFlow&lt;Boolean&gt; = _isLoading</ID>
    <ID>UndocumentedPublicProperty:AuthenticatedServersStore.kt$AuthenticatedServer$val serverAddress: String</ID>
    <ID>UndocumentedPublicProperty:AuthenticatedServersStore.kt$AuthenticatedServer$val token: String</ID>
    <ID>UndocumentedPublicProperty:AuthenticatedServersStoreImpl.kt$AuthenticatedServerDto$@ColumnInfo(name = "server_address") val serverAddress: String</ID>
    <ID>UndocumentedPublicProperty:AuthenticatedServersStoreImpl.kt$AuthenticatedServerDto$@PrimaryKey @ColumnInfo(name = "token") val token: String</ID>
    <ID>UndocumentedPublicProperty:DI.kt$val authModule = module { singleOf(::AuthenticatedServersStoreImpl) bind AuthenticatedServersStore::class viewModelOf(::AuthViewModel) }</ID>
    <ID>UnusedImports:AuthComponents.kt$import androidx.compose.foundation.layout.IntrinsicSize</ID>
    <ID>UnusedImports:AuthComponents.kt$import androidx.compose.foundation.layout.fillMaxSize</ID>
    <ID>UnusedImports:AuthComponents.kt$import androidx.compose.material3.ButtonDefaults</ID>
  </CurrentIssues>
</SmellBaseline>
