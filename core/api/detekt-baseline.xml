<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>MaxLineLength:ReportingV2ApiImpl.kt$ReportingV2ApiImpl$reportingQuery = ReportingGraphDataRequestDto.ReportingQuery(start.epochSeconds, end.epochSeconds, null, null)</ID>
    <ID>NewLineAtEndOfFile:ApiKeyV2ApiImpl.kt$com.boswelja.truemanager.core.api.v2.apikey.ApiKeyV2ApiImpl.kt</ID>
    <ID>NewLineAtEndOfFile:AuthV2ApiImpl.kt$com.boswelja.truemanager.core.api.v2.auth.AuthV2ApiImpl.kt</ID>
    <ID>StringLiteralDuplication:ApiKeyV2ApiImpl.kt$ApiKeyV2ApiImpl$"api_key/id/$id"</ID>
    <ID>StringLiteralDuplication:ReportingV2ApiImpl.kt$ReportingV2ApiImpl$"reporting/get_data"</ID>
    <ID>TopLevelPropertyNaming:ApiV2Module.kt$@OptIn(ExperimentalSerializationApi::class) val apiV2Module = module { // API state singleOf(::InMemoryApiStateProvider) bind ApiStateProvider::class // Ktor client single { val apiStateProvider: ApiStateProvider = get() HttpClient(Android) { // TODO if debug, BuildConfig appears to be missing install(io.ktor.client.plugins.logging.Logging) { level = io.ktor.client.plugins.logging.LogLevel.ALL logger = object : io.ktor.client.plugins.logging.Logger { override fun log(message: String) { Log.i("Ktor", message) } } } install(ContentNegotiation) { json(Json { explicitNulls = false }) } defaultRequest { apiStateProvider.authorization?.let { authorization -&gt; when (authorization) { is Authorization.ApiKey -&gt; bearerAuth(authorization.apiKey) is Authorization.Basic -&gt; basicAuth(authorization.username, authorization.password) } } apiStateProvider.serverAddress?.let { url(it) } } } } singleOf(::ApiKeyV2ApiImpl) bind ApiKeyV2Api::class singleOf(::AuthV2ApiImpl) bind AuthV2Api::class singleOf(::ReportingV2ApiImpl) bind ReportingV2Api::class }</ID>
    <ID>UndocumentedPublicClass:ApiKeyV2Api.kt$ApiKey</ID>
    <ID>UndocumentedPublicClass:ApiKeyV2Api.kt$ApiKey$AllowRule</ID>
    <ID>UndocumentedPublicClass:ApiKeyV2Api.kt$ApiKeyV2Api</ID>
    <ID>UndocumentedPublicClass:ApiStateProvider.kt$ApiStateProvider</ID>
    <ID>UndocumentedPublicClass:ApiStateProvider.kt$Authorization</ID>
    <ID>UndocumentedPublicClass:ApiStateProvider.kt$Authorization$ApiKey : Authorization</ID>
    <ID>UndocumentedPublicClass:ApiStateProvider.kt$Authorization$Basic : Authorization</ID>
    <ID>UndocumentedPublicClass:AuthV2Api.kt$AuthV2Api</ID>
    <ID>UndocumentedPublicClass:ReportingV2Api.kt$ReportingConfig</ID>
    <ID>UndocumentedPublicClass:ReportingV2Api.kt$ReportingGraph</ID>
    <ID>UndocumentedPublicClass:ReportingV2Api.kt$ReportingGraphData</ID>
    <ID>UndocumentedPublicClass:ReportingV2Api.kt$ReportingGraphData$Aggregations</ID>
    <ID>UndocumentedPublicClass:ReportingV2Api.kt$ReportingV2Api</ID>
    <ID>UndocumentedPublicClass:ReportingV2Api.kt$RequestedGraph</ID>
    <ID>UndocumentedPublicClass:ReportingV2Api.kt$Units</ID>
    <ID>UndocumentedPublicFunction:ApiKeyV2Api.kt$ApiKeyV2Api$suspend fun create(name: String): String</ID>
    <ID>UndocumentedPublicFunction:ApiKeyV2Api.kt$ApiKeyV2Api$suspend fun delete(id: Int)</ID>
    <ID>UndocumentedPublicFunction:ApiKeyV2Api.kt$ApiKeyV2Api$suspend fun get(id: Int): ApiKey</ID>
    <ID>UndocumentedPublicFunction:ApiKeyV2Api.kt$ApiKeyV2Api$suspend fun getAll(limit: Int?, offset: Int?, sort: String?): List&lt;ApiKey&gt;</ID>
    <ID>UndocumentedPublicFunction:ApiKeyV2Api.kt$ApiKeyV2Api$suspend fun reset(id: Int): String</ID>
    <ID>UndocumentedPublicFunction:ApiKeyV2Api.kt$ApiKeyV2Api$suspend fun update(id: Int, name: String)</ID>
    <ID>UndocumentedPublicFunction:ReportingV2Api.kt$ReportingV2Api$suspend fun clearReportingDatabase()</ID>
    <ID>UndocumentedPublicFunction:ReportingV2Api.kt$ReportingV2Api$suspend fun getGraphData(graphs: List&lt;RequestedGraph&gt;): List&lt;ReportingGraphData&gt;</ID>
    <ID>UndocumentedPublicFunction:ReportingV2Api.kt$ReportingV2Api$suspend fun getGraphData(graphs: List&lt;RequestedGraph&gt;, start: Instant, end: Instant): List&lt;ReportingGraphData&gt;</ID>
    <ID>UndocumentedPublicFunction:ReportingV2Api.kt$ReportingV2Api$suspend fun getGraphData(graphs: List&lt;RequestedGraph&gt;, unit: Units, page: Int): List&lt;ReportingGraphData&gt;</ID>
    <ID>UndocumentedPublicFunction:ReportingV2Api.kt$ReportingV2Api$suspend fun getReportingDatabaseSettings(): ReportingConfig</ID>
    <ID>UndocumentedPublicFunction:ReportingV2Api.kt$ReportingV2Api$suspend fun getReportingGraphs( limit: Int?, offset: Int?, sort: String?, ): List&lt;ReportingGraph&gt;</ID>
    <ID>UndocumentedPublicFunction:ReportingV2Api.kt$ReportingV2Api$suspend fun setReportingDatabaseSettings(newConfig: ReportingConfig)</ID>
    <ID>UndocumentedPublicProperty:ApiKeyV2Api.kt$ApiKey$val allowList: List&lt;AllowRule&gt;</ID>
    <ID>UndocumentedPublicProperty:ApiKeyV2Api.kt$ApiKey$val createdAt: Instant</ID>
    <ID>UndocumentedPublicProperty:ApiKeyV2Api.kt$ApiKey$val id: Int</ID>
    <ID>UndocumentedPublicProperty:ApiKeyV2Api.kt$ApiKey$val name: String</ID>
    <ID>UndocumentedPublicProperty:ApiKeyV2Api.kt$ApiKey.AllowRule$val method: String</ID>
    <ID>UndocumentedPublicProperty:ApiKeyV2Api.kt$ApiKey.AllowRule$val resource: String</ID>
    <ID>UndocumentedPublicProperty:ApiStateProvider.kt$ApiStateProvider$var authorization: Authorization?</ID>
    <ID>UndocumentedPublicProperty:ApiStateProvider.kt$ApiStateProvider$var serverAddress: String?</ID>
    <ID>UndocumentedPublicProperty:ApiStateProvider.kt$Authorization.ApiKey$val apiKey: String</ID>
    <ID>UndocumentedPublicProperty:ApiStateProvider.kt$Authorization.Basic$val password: String</ID>
    <ID>UndocumentedPublicProperty:ApiStateProvider.kt$Authorization.Basic$val username: String</ID>
    <ID>UndocumentedPublicProperty:ApiV2Module.kt$@OptIn(ExperimentalSerializationApi::class) val apiV2Module = module { // API state singleOf(::InMemoryApiStateProvider) bind ApiStateProvider::class // Ktor client single { val apiStateProvider: ApiStateProvider = get() HttpClient(Android) { // TODO if debug, BuildConfig appears to be missing install(io.ktor.client.plugins.logging.Logging) { level = io.ktor.client.plugins.logging.LogLevel.ALL logger = object : io.ktor.client.plugins.logging.Logger { override fun log(message: String) { Log.i("Ktor", message) } } } install(ContentNegotiation) { json(Json { explicitNulls = false }) } defaultRequest { apiStateProvider.authorization?.let { authorization -&gt; when (authorization) { is Authorization.ApiKey -&gt; bearerAuth(authorization.apiKey) is Authorization.Basic -&gt; basicAuth(authorization.username, authorization.password) } } apiStateProvider.serverAddress?.let { url(it) } } } } singleOf(::ApiKeyV2ApiImpl) bind ApiKeyV2Api::class singleOf(::AuthV2ApiImpl) bind AuthV2Api::class singleOf(::ReportingV2ApiImpl) bind ReportingV2Api::class }</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingConfig$val cpuInPercentage: Boolean</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingConfig$val graphMaxAgeMonths: Int</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingConfig$val graphPoints: Int</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingConfig$val graphiteInstanceUrl: String</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingConfig$val graphiteSeparateInstances: Boolean</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingConfig$val id: Int</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingGraph$val identifiers: List&lt;String&gt;</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingGraph$val name: String</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingGraph$val stacked: Boolean</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingGraph$val stackedShowTotal: Boolean</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingGraph$val title: String</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingGraph$val verticalLabel: String</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingGraphData$val aggregations: Aggregations?</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingGraphData$val data: List&lt;List&lt;Double?&gt;&gt;</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingGraphData$val end: Instant</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingGraphData$val identifier: String?</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingGraphData$val legend: List&lt;String&gt;</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingGraphData$val name: String</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingGraphData$val start: Instant</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingGraphData$val step: Int</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingGraphData.Aggregations$val max: List&lt;Double?&gt;</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingGraphData.Aggregations$val mean: List&lt;Double?&gt;</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$ReportingGraphData.Aggregations$val min: List&lt;Double?&gt;</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$RequestedGraph$val identifier: String?</ID>
    <ID>UndocumentedPublicProperty:ReportingV2Api.kt$RequestedGraph$val name: String</ID>
  </CurrentIssues>
</SmellBaseline>
